
### a) Write an R function *dtriang()* to compute the density of this triangular distribution at one or more values of *x*.
```{r,echo=TRUE}
dtriang <- function(x) {            # "x" are the value(s) for which the pdf is computed (for values less than or equal to each x). 
  n = length(x)             # "n" gives the number of values 
  f_x = vector()            # initializes "f_x": a vector storing density values
  
  for (i in 1:n) {                           # enter a for-loop to compute the pdf value for each x given
    if (-1 <= x[i] && x[i] <= 0) {           # if-statement computes pdf values for x values between -1 and 0
      f_x = c(f_x,(x[i] + 1))  
    } else if (0 < x[i] && x[i] <= 1){       # if-statement computes pdf values for x values between 0 and 1
      f_x = c(f_x,(1 - x[i]))
    } else {                                 # else-statement assigns value 0 for any x-values input into the function not between -1 and 1 (although should not be necessary for this assignment)
      f_x = c(f_x,0)
    }
  }
  
  return(f_x)       # returns vector of density values
}

```

### b) Derive the formula for the cumulative distribution function F (x).
Handwritten on page 3

### c) Write an R function *ptriang()* which takes one or more values of the random variable and computes the probability for a Triangular distribution to be less than or equal to the specified value(s).
```{r,echo=TRUE}
ptriang <- function(x) {            # "x" are the value(s) for which the cdf is computed (for values less than or equal to each x). 
    n = length(x)                   # "n" gives the number of values 
    P_x = vector()                  # initializes "P_x": vector of cdf values 
    
  for (i in 1:n) {                  # enter a for-loop to compute the cdf value for each x given
    if (x[i] < -1) {                # lowest bound for the cdf 0 value for the cdf if below -1
      P_x = c(P_x,0)  
    } else if (-1 <= x[i] && x[i] <= 0){   # computes cdf value if random x value between -1 and 0
      P_x = c(P_x,((1/2)*(x[i] + 1)^2))   # (will try to avoid using a concatinate to accomplish this in the future)
    } else if (0 < x[i] && x[i] <= 1) {    # computes cdf value if random x value between 0 and 1
      P_x = c(P_x,(1-(((1-x[i])^2)/2)))    
    } else {                               # computes cdf value if random x value greater than 1
      P_x = c(P_x,1)
    }
  }
  return(P_x)                             # returns vector of cdf values
  
}
```
### d) Derive the formula for the inverse of the CDF $F^{-1}(x)$.
Handwritten on page 5


### e) Use the inverse CDF to define a function rtriang() that produces IID samples from a triangular distribution.
```{r,echo=TRUE}
rtriang <- function(n) {              # "n" is the sample size for the number of samples for the inverse CDF to be generated
  set.seed(33)                # chose a random seed point based off of the minute hand of the clock at the time of writing the code
  uniformSample = runif(n)     # generate a uniform random sample of size n
  x_vector = vector()           # "x_vector" stores a vector of random samples from the triangle distribution generated from the uniform random samples
  
  for (i in 1:n) {
    if (0 <= uniformSample[i] && uniformSample[i] <= 0.5){         # calculates the inverse CDF if uniform random sample value is between 0 and 0.5
      x_vector = c(x_vector,(sqrt(2*uniformSample[i]) - 1))        
    } else if (0.5 < uniformSample[i] && uniformSample[i] <= 1){  # calculates the inverse CDF if uniform random sample value is between 0.5 and 1
      x_vector = c(x_vector,(1 - sqrt(2*(1 - uniformSample[i]))))    
    }
  }
  
  return(x_vector)                                                # returns vector of inverse cdf values
}

```
### f) Produce graphs of the density and CDF using the functions you wrote. Use your rtriang() function to draw a large IID sample and produce a graph to verify that your function is working as intended.

#### Density graph for triangular distribution

```{r,echo=TRUE}
pdf_x_values = (seq(-2, 2, length=1000))     # generates sequence of values used to generate pdf plot
plot(pdf_x_values,dtriang(pdf_x_values),main="Plot for pdf function")  # plots pdf of triangle distribution from function created
```


#### CDF graph for triangle distribution
```{r,echo=TRUE}
cdf_x_values = seq(-1, 1, length=500)                 # "cdf_x_values" generates sequence of values used to generate cdf plot 
plot(cdf_x_values,ptriang(cdf_x_values),main="Plot for cdf function")    # plots cdf of triangle distribution from function created
```

#### Produce a graph that proves your function is working as intended:
```{r,echo=TRUE}
hist(rtriang(1000),breaks=20)       # generates a frequency plot of the values generated by using the inverse-transform method
```

